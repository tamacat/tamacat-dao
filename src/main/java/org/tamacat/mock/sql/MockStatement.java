/*
 * Copyright (c) 2008, tamacat.org
 * All rights reserved.
 */
package org.tamacat.mock.sql;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

import org.tamacat.log.Log;
import org.tamacat.log.LogFactory;

public class MockStatement implements Statement {

    static final Log LOG = LogFactory.getLog(MockStatement.class);

    private Connection con;
    MockStatement(Connection con) {
        this.con = con;
    }

    public void addBatch(String sql) throws SQLException {
    }

    public void cancel() throws SQLException {
    }

    public void clearBatch() throws SQLException {
    }

    public void clearWarnings() throws SQLException {
    }

    public void close() throws SQLException {
    }

    public boolean execute(String sql) throws SQLException {
        LOG.info("execute: " + sql);
        return true;
    }

    public boolean execute(String sql, int autoGeneratedKeys)
            throws SQLException {
        LOG.info("execute: " + sql);
        return true;
    }

    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        LOG.info("execute: " + sql);
        return true;
    }

    public boolean execute(String sql, String[] columnNames)
            throws SQLException {
        LOG.info("execute: " + sql);
        return true;
    }

    public int[] executeBatch() throws SQLException {
        return null;
    }

    public ResultSet executeQuery(String sql) throws SQLException {
        LOG.info("executeQuery: " + sql);
        return new MockResultSet(this);
    }

    public int executeUpdate(String sql) throws SQLException {
        LOG.info("executeUpdate: " + sql);
        return 1;
    }

    public int executeUpdate(String sql, int autoGeneratedKeys)
            throws SQLException {
        LOG.info("executeUpdate: " + sql);
        return 1;
    }

    public int executeUpdate(String sql, int[] columnIndexes)
            throws SQLException {
        LOG.info("executeUpdate: " + sql);
        return 1;
    }

    public int executeUpdate(String sql, String[] columnNames)
            throws SQLException {
        LOG.info("executeUpdate: " + sql);
        return 1;
    }

    public Connection getConnection() throws SQLException {
        return con;
    }

    public int getFetchDirection() throws SQLException {
        return 0;
    }

    public int getFetchSize() throws SQLException {
        return 0;
    }

    public ResultSet getGeneratedKeys() throws SQLException {
        return null;
    }

    public int getMaxFieldSize() throws SQLException {
        return 0;
    }

    public int getMaxRows() throws SQLException {
        return 0;
    }

    public boolean getMoreResults() throws SQLException {
        return false;
    }

    public boolean getMoreResults(int current) throws SQLException {
        return false;
    }

    public int getQueryTimeout() throws SQLException {

        return 0;
    }

    public ResultSet getResultSet() throws SQLException {
        return new MockResultSet(this);
    }

    public int getResultSetConcurrency() throws SQLException {
        return 0;
    }

    public int getResultSetHoldability() throws SQLException {
        return 0;
    }

    public int getResultSetType() throws SQLException {
        return 0;
    }

    public int getUpdateCount() throws SQLException {
        return 0;
    }

    public SQLWarning getWarnings() throws SQLException {
        return null;
    }

    public boolean isClosed() throws SQLException {
        return false;
    }

    public boolean isPoolable() throws SQLException {
        return false;
    }

    public void setCursorName(String name) throws SQLException {
    }

    public void setEscapeProcessing(boolean enable) throws SQLException {
    }

    public void setFetchDirection(int direction) throws SQLException {
    }

    public void setFetchSize(int rows) throws SQLException {
    }

    public void setMaxFieldSize(int max) throws SQLException {
    }

    public void setMaxRows(int max) throws SQLException {
    }

    public void setPoolable(boolean poolable) throws SQLException {
    }

    public void setQueryTimeout(int seconds) throws SQLException {
    }

    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return false;
    }

    public <T> T unwrap(Class<T> iface) throws SQLException {
        return null;
    }

	/* @since 1.7 */
	public void closeOnCompletion() throws SQLException {		
	}

	/* @since 1.7 */
	public boolean isCloseOnCompletion() throws SQLException {
		return false;
	}
}
